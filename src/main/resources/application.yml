spring:
  application:
    name: auth-micro
  datasource:
    url: jdbc:postgresql://${POSTGRES_DB_HOST}:${POSTGRES_DB_INTERNAL_PORT}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}

  sql:
    init:
      mode: always
      schema-locations: classpath:session-schema.sql

  session:
    store-type: jdbc

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  security:
    oauth2:
#      client:
#        registration:
#          keycloak:
#            provider: keycloak
#            client-id: auth-micro
#            client-secret: HBQe0ZgLaAwYTQX8X9SPpcOexXYv94ab
#            client-name: auth-micro
#            authorization-grant-type: authorization_code
#            scope: openid, profile, email
#        provider:
#          keycloak:
#            issuer-uri: http://keycloak:8080/realms/auth-micro
#            token-uri: http://keycloak:8080/realms/auth-micro/protocol/openid-connect/token

      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/auth-micro

management:
  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - debug
          - env